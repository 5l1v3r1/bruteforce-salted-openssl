bruteforce-salted-openssl
=========================

The purpose of this program is to try to find the password of a file that was
encrypted with the 'openssl' command (e.g.: openssl enc -aes256 -salt
-in clear.file -out encrypted.file).

The program tries to decrypt the file by trying all the possible passwords.
The minimum and maximum password length to try can be indicated as option
on the command line.
The beginning and the end of the password can be specified too.
There are also options to indicate the cipher, digest, character set and
number of threads to use.

The program should be able to use all the digests and symmetric ciphers
available with the OpenSSL libraries installed on your system.


## Dependencies

The program requires the OpenSSL libraries.


## Available options

  -1           Stop the program after finding the first password candidate.

  -a           List the available cipher and digest algorithms.

  -B <string>  Search using binary passwords (instead of character passwords).
               Write candidates to file <string>.

  -b <string>  Beginning of the password.
               default: ""

  -c <cipher>  Cipher for decryption.
               default: aes-256-cbc

  -d <digest>  Digest for key and initialization vector generation.
               default: md5

  -e <string>  End of the password.
               default: ""

  -h           Show help and quit.

  -L <value>   If the option -1 is activated, limit the maximum number of
               tested passwords to <value>. If not, print a message every
               <value> passwords tested.

  -l <length>  Minimum password length (beginning and end included).
               default: 1

  -M <string>  Consider the decryption as successful when the data starts
               with <string>. Without this option, the decryption is considered
               as successful when the data contains mostly printable ASCII
               characters (at least 90%).

  -m <length>  Maximum password length (beginning and end included).
               default: 8

  -N           Ignore decryption errors (similar to openssl -nopad).
  -s <string>  Password character set.
               default: "0123456789ABCDEFGHIJKLMNOPQRSTU
                         VWXYZabcdefghijklmnopqrstuvwxyz"

  -t <n>       Number of threads to use.
               default: 1


## Limitations

The program considers decrypted data as correct if it is mainly composed of
printable ASCII characters (at least 90%).
If the file you want to decrypt doesn't contain plain text, you will have
to either use the -M option, or modify the 'valid_data' function in the source
code to match your needs.


## Examples

Try to find the password of an aes256 encrypted file using 4 threads, trying
only passwords with 5 characters:

    bruteforce-salted-openssl -t 4 -l 5 -m 5 -c aes256 encrypted.file


Try to find the password of a des3 encrypted file using 8 threads, trying
only passwords with 9 to 11 characters, beginning with "AbCD", ending with "Ef",
and containing only letters:

    bruteforce-salted-openssl -t 8 -l 9 -m 11 -c des3 -b "AbCD" -e "Ef" \
      -s "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" encrypted.file


Show the list of available algorithms:

    bruteforce-salted-openssl -a


If the program finds a candidate password 'pwd', you can decrypt the data
using the 'openssl' command:

    openssl enc -d -aes256 -salt -in encrypted.file -out decrypted.file -k pwd


## Donations

If you find this program useful and want to make a donation, you can send coins
to one of the following addresses:
 - Peercoin: PWFNV1Cvq7nQBRyRueuYzwmDNXUGpgNkBC
 - Bitcoin: 1F1ZfM7XtggHsShK4vwuy9zv98a9wt7nXx
